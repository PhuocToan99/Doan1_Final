<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAABGdBTUEAALGPC/xhBQAAFoxJREFUeF7l
        mwdYFdfWhmPqH40plqgxPdEIKF0UFaRYURQUUAQsYIxgbIkmllhiBcSCIkiRjqEoVUCIFMEKgkoHe2xY
        Iiii4pW97lp79oFzvBZIzL3iv5/ne9Z4zpyZWe/+1toz5+Ar/+sxYZDuWzbGfVRsjHqPRTnZGuvMJuH2
        FJS+3WDd98Su/3+GuZ72ayN11fVN+6qtnDRsQNl3Y4c9dLIaAY6WJjDdYhg4WgwHRysT+jezH2Fw1dpA
        yxelPcG4TytxiJdzjBuo9YZ5PzXbsQN1imxHGMGUUYOZ3ZD+YNlflVn06wlCsm1m2a8X2BjrMIfRg8B+
        lHG9taF2mpW+xkBxuJdrTDDQ7DHeQCvbzsSg3tKwLwzWUIaRvZVlUJ4pKz01sBumBxOHD3xgqaceYKmn
        0UEcuuWPSUYalnaD+960GdKPmfftCcO1lJixWg8w7a3Mxur2hLG6KiLKbz8+WgxQYxOGDAArfa2Ksf1U
        e4pTtNwx2UhjMsJ5YGukDeP69wKzPipgoqUMg9R7wCgdFRiDwJotBGVpoAMWepoXzHVVVcSpWt6YZKSu
        b2OkXTvJWBMmDlQlQOggFRihrcwIkGlvFe4o8z4iym8/K6LGDNBk5rpqJ0b37dVGnLLlDDsDtTa2Bhrl
        toaaYG+kDhMNVGH8gF7oAA4IBiMg6kHkqL+jUbrqbHQflR/FaVvOmGSo5mSlp84Ijr2xOkwyUANrAqSr
        wsEM0ejBQWFyf0tUpqY6KkWo18WpX/xhN1D1NRt91aMTEYq9kRpzQECTDRGQXi/eaKk5OwztC84OI3i5
        jNJRZpSoJNn2s2Ljtom28kOE3lWc/sUfWE4dEEYdwgGCIwM0Qa8XQlIDt29N4eDW76E0bD5schwNZggJ
        HfCXRU0fAemL07/4A2Fo2uqrcufIHDQFYf00Vp/FrbSH8vAF7HLiMkCxioiF4D9vHBunp45J8vJjTYuN
        2+gghuU6Vpz+xR9TDNX0yTEy93w7SAM8ZoyGHJ8f4MLuFXBlzyoFnYlZBsku0+AX60Fg0V+VEocRzZCJ
        thL1Mytx+hd/oGvUZM6hSHAqopZCZaozq0x1eWy8vGctFIUthrQNTixsoQ14z7FgmxzNYI29CfvZyghs
        DbXIJQSDR/ltilhmg8TpX/yBUDoinIcEaMbw3lC4YwlcTVvfJFXudYNLKa5wPnEtnIldBeU7f4WC0MWw
        f+sc2DbbAqwHavKe86jw7lxJnP7FHwjmTYR0lgA5OwxnlenucC1zM1zN3MyeFp+1z9ndLpC6fgazMdRC
        IAhFU4mJWDNMS6mtOH3LGAgnnACFLpsM17M8ua49IzZln8pMD4j81QGGY2kN01SS6fBQTaVXxalbxkA4
        DgQofuMsuH7Q97nqXMomsDXqDQhFJjdx2pYzZpjodEFAdxK3/MhuHAkAIdn2k2JT9uFx2RRTuhtnQzSU
        6jG2zO+InEx0YmI3zoE/j4Y+d3kusofBGkqoHn/gc92b4pQta7g4mg8OWv5t/c38cBBiz4hN2YfHgFUz
        6SsTNlRTeY04Xcsbketmv+E+1zqn6sQueN7attwJjNV73DMboNlNnK5ljh3Os8z/PBFTX10UB9WFceyp
        sSn7iOg8dxKYDdAKE6dpueN0Vkir6uLE4lslSfAcxWaOH3Fr8bdWyuI0LXtUl6YsvF2eCrfKU9nTYlP2
        oXijMOnPHyeNWSEO3/LH7Yr0L2pOZtTePpkBGOFJ8WnvycfKE0nJWTs9W84XZE0ZNWf2J6Dgeai6Yl/L
        +4r1WePOuSOmd87nMBQ8JT7tvYZYc/bwy9F75Med80dfq72QfwoFf1NJeKyX8yfo2osnLO5eLvwXiqHg
        MfFxr8nH07UXj7ec756bOzC5VncvFS67V1laj4Jm6gZ+Vl0c6uUdNWcPtbrzx9Ht96+dhPvXTzGUfHzc
        a+zetZM3ai8V6IpDvPwDHxW8bpfvxeRPQ92f55+qe5VlgDeayeKjL/+oKox7ter4zryq41GUOKPyqau+
        xB5UXwKSbJvi3csFUFUYyxBogfj4yz8w4U+rCmIeVhfEAEaoLoiFmlNZ6KaTCOgyF5VfzclMfE+2T8wt
        fAbrKA7xco/qooSF1UXx+MAZjw+nivFWaTLpce+xqqIEa3GIl3dg8u/cKkk8g8IHzuapuiSxIPfIvv8T
        h+Jj/G/X37baceMzs+Br6ib+lbqjgyrVLUKvfmYVWtla7NKyRlVZ6qzbZSkMBX9F5wrS1y2NKe0y1Pv8
        LD2PC8mmgVevTIy6ed8xvhpmJt6C6XFVYBdx/b6J38UrupvO7NHbfHqWie+5LuL0L/YoKM779HbF3pso
        QLEnxCe+V5yfyRaEH39oFXK5bnFaDazIvguzk24z26gqGBP6JzMLvg7oJGYTfh2+T6hiv+67A4v23gLz
        gD/uarqU+BluqXhxv1gLKq7Ris07XX6xIA1un8Kn8mboZkUmbE3IAeuQ87A8swam7roB6B7Q2vgHaG+6
        BL03XwGdLZWg7X4ZX7sAGuvPgdq6M6DqchJ0N52CKZGVsDT9Fpj6nrmt7VK4YJBH2Yvz/bVrXs1XHsX1
        QVtxJUeBX+EdlpufA1Vl6ezOmWyoOZ2tEB997VLpfnAMOsbmJv4J06KvMU23k6Dmeoqpu50FzQ1/gNam
        i6w3guntfoURLM2NF5gE6DQjQD3XloHy6mKmtrYYHKIus9kJ15jGmmNJAzYUthOX+L8Z40KOtFuUdmZt
        6FlWQ2AUVMIg9MR1yMk/CleKMtFR++HO2UOowwo6X3oYbP1OwE8pN8Fo6ylQWVMCvZzLuTPU0SEEgkPa
        eJFAcfdobjgPBE/N9TTuWwE915SC8qpiUFpZAN/8egz0N5XAT8nXQXNN/gFd12P//b+SNdue9dpInyyH
        4d77/jDxyWZzk8sh7Ewd86mQ4HiUMCYfvYvus/BjlyA1r5QdzD8G+cdy4djxXHYg9yjYbcthc3dfB23X
        Yqa0spA7gRyBiTN0EYLgkJjm+vMEhjsH4TB0D0HEfcs5VOVVRazHihPQffkx1m3pUVBfnc9+TLwKqiuO
        ZPVbl/+WuPR/fpj6ZPYZ4bPvwMQdh5lV0EFAQDDS7xBYheaBW+5VCD1bD15lj7jpMUJ4+Jlz4BRzBTSd
        ceaXH4MeKwooUZ4wJU4uIkjUayQg6BaCx9+r4E7j7llN7ilE9xyH7svy4OslufDVL4dBdWUuOO66AN1/
        yd6s65r7z351YuqT0XaoZ9p6q8D996ZG5oDZ9mw23DsLRvgeYATIdPsRNjogFxx2FYPHiZss7ByDbWWK
        TpJF0oKMamYZcAr0NhbhjOdiYvmMEsQyYVQuKmtKZU7ibiJwOmtymVNYKfRzzUO3FfB9VAQcdA8jyOge
        9vWSHPhy8SH2xcJs6Ot6lJn5lNSpLMv+5/4ybZjn3iHDvdJP2YcfBqug/TDUKxOGbdvH3TPC9yCM3H4Y
        RvkfAQJkHnQUxgTng310CbjmXoPAk3UQdJqBd7miewZ5FIFlwElKBGc8hxKj8qBEecINTkKHqKwuAY1V
        OXC5+h7QqKp9AH2c8/h+SrgfOY96j7x7vlh0AD5fkAWf/pQBY/3wGEuzjmitOvh8//DBxGtva+MtKZss
        AvbVTf7tEAzflgGDPdMlQN6NgEw5IHRVIAHKg7EIyCL0OFiGnYAJEcUwM+kMrD50FbYU3ALfsruwdN91
        GOVdAj2WHuCJUEKUWDdMsBGSVG6y8hmyMR8YYxwQxdFbT/D9SFJp5SNkgnOEQyf3fPZzJnw6Px2+XpgB
        pl4F9T0WZxiL1P7+GOqR2s1o857ciWEHYKz/Pma85Xec9TQCxAgQNmgmATrECNBo/xxmFnhUAhRyjBEg
        q7ACNu63IrAOL2YTIkrBJqqM2e2sAG1nLMltxYwS+HxhFvty0UFKDEuDQ2Ldl+dT0rzpEih0COu+NAdw
        TWCnrtZC4IGL/N/oGl5W5ByEw776RVZa+9E9+xi555N5e1nXH1NhuMdx+Hx+yvP5AdLIPcl4sEfK1ck7
        DsIwz9/BcHMqcEBb02CIcBACamjQAhA6CMtLAsQdhIBAAIIJkaVgG1WOjiqD/utyAHsC2j8dZ3kfn20B
        qbHcMGlKntzBHYLQyGndFqPjFmPkbkPXUFk1OIdKi+Bk4XERzvw0+PjH36HrD3ugx+J00FqZVam0OO3v
        /QHWwI27Rw/x2HPXLnQ/GLonM4NNewjQc3PQ6MBC6O9yBC88lVECOMvopH3opGzJSYsPs6/RCegmvlxz
        EOgqKp8JfiXMN/sixmLJbegaAirKigk43JmfzE9nH88jOCnsoznJ0GVOIvRZvZ99Pi9ZW6Ta/DHALb6P
        4abE29ZBWaC/IRH0NyaBACQ5SALUrB40bkchjCcHRZSADbrIeGsuzuR+unA+uwISdxKWG3cA9RByi8xR
        BKP32nyouf+Q96B7D+qhnws5SnINgSUXYlkJ56TDx/P24jlS4aO5CGd2InSalQDqyzOg65yEKSLd5o2+
        LjFt+rrElhu7J4He+t1swPrdBIgN3JSMgFKYEQe0Vzgog1Yx4aCDTKxifJkXqxizCEFAoSeY1Q5eZoyX
        WUQJ6+d2EJR/ycAZTWYCknBSutSTsHdQsti8uaMIAMJiZl5F1Jx5l6Y43q+EwIh+QyUles78NOGcVPbR
        3D14niTWGeF8+H0c9FiYyjp9H7NEpNy80cc5eg1CAl3XOOjvFg8c0IYk4IDcU6AB0NZ0GCIBwjLj90G8
        D8mW+Uf7UIOLRC/SdsZZnpcMnXFWEZJwUio1Uzk3cVA8cQnWQTDzKubukQ1rBIRlyZ1HrqF+Rp+Xek4K
        OofDgc6zdsOHM+Oh44xY+PSHBOjotGulSLnpQ2ftrq6omwiIEaB+bvHcQXobErmDDNzRQVRmHFAaG+KZ
        AUO3ZfIbRXSRuFE8zHiZcRflMboXol6ELpJ6EUIiJ2mvzeSziZZnEqQkPtM04zTztOrQ0iw5SsDC/mS+
        rVTBQdbbS+EzvlIJMPg5As17jlRW6BwOhxGcDk7R0H76TtZ+elTzAfVes3MpAsKbL3JQLPRbRw5KIEAw
        cCMBkutDciuZfB9qdJG0mlEvEpAanESrWt91WTibMRIknFlKgmaakqKZpyWZXEA9hBInEaQx3niHKTcm
        bC/jbiOoAkyja0TP+XBmHHeOgAPtv4uE9tMifhJpN31or44q6s0BRQP2IQREZSYBokY9kDfqJ5eZic/+
        huWeXCRfagqQ0E0G7gegveMutDpBihWQEkTJSaAkRzXCIpeM8VEEZO1fxuE1gpGaMQHvNFPqOTQR8nDa
        fRuO+s1CpN20obUqsisCeoAuAh3naCb6EBN9iIk+xLDMQCqz35lwEV/uG5u17JmMQ+INGyEx4SRGKxuV
        nIlvDnSYHoWQdjK6eEyCCTfxkkBQjEBJpSfB+nj+XmaOjwsKJRZQCl3npUr7SmAYBzMzDo8XSxPAOuBE
        YEmx9t9FcDgfTN3xEPWVSL1pAwEN1VodyTggchEHpFhmjcv941xE90S8FzWUGj64KjjJXFZyKIqfzImR
        7I4zS0mQm6gUZGVH5SHB4sDQSSlg7q/ooPFBpfAR3gDSvgIMd2SDaxzRNTQR0wjObwQH3ncILUG9IVJv
        2tBcGeGAkABdRICYKDMmykxa7jdIy71wkXTTiM1auifKYKLUZMs+QeI3j9LSz0HhTaRwFMJSX5FCM8pn
        ls8wJoOgWMcGR3FY6AiEheryQzIzCyhRcND44BLoPDeJu4/g0uckMLuoEUO77yJZu2m8pNgHU8PgffsQ
        eM8+eLVIu+lDY2X4PM1VERyQKDMEJC33kov4avYfLhIrGpYarmhSqT3GSYeFm7B5c0dJrhq67SC0/3YH
        n1lKQoBqcBQlKsqPq9PcRBgdqLjMjwsphk5zEqR9qZRkjqFeI+eaDxxCJThTgu6jvhBpN31orAj/BV0E
        3EVrophYzbAX8WaNvShBvhfRisZoRUNITCo1sex7ZcqcxJf+Eb77CVTDLYCAhbcCEjClRfGMLh6TYAKU
        1Ctw5gUs7ixq6B/OjmejghRvFK1CiqDjrDhpX4JCnxOOacfBhDEsJwQTzN6dHATvTg7wFSk3byCgb9BF
        lxtctFbeRVIvUlzRGkpNPH6IfqTgJJSPzE0HGhzVqMO4fzZ0/A77As6uACU5SuYqdAF3FibfYWYMGHo3
        ft1BY6h3HnSYsYvvK1Yn4RgsJwIjuQbBBELbSf5X2k4K+Eik3PyBgLqji7LQRQxdpNCLdHkvarhxFI8f
        WGqym0cFJ0mNm24iZX1J5ii6FUBXobMIGBeeIwXenRLEcJYJFJ9xmnnqGQ3OQrV3jGSfLt0LO4tvsAf1
        DGJLrrOPFyaja8JxX4RCPcYhlIk+g8fjYBhCgXcmbq9H/f3/xjncNbyVkXPERJ01UaXSihYtt6JJ90X/
        0Y8ecRIt/9S4ZW5CUNxRdENJoB6nnkvi+CyTKDEBSxIC49AQQHunSOj0cyJ8tCQVPpwXT3Ck9yUo/HNS
        KZFjOBh4x86vvrO931KR4vMZjlt+a222PsJ6oMvObHTRw0dLTYKEpUZ32AKS6Em8cfMnfgVQ8rAEMDnR
        e0qLoqHtRH+e2LskDgyTFcC4EML7DghtKkGTlY8ERAaFjiHAQBtb3/qvp/utNl8S8JpI7a+N4ODgVoHB
        Ia9vDwp52zcwpK1PYEh7VKeg4JBPVvuGmdpviQwa7BZ9Hle1egGp4TlN9CS8ieSrGz7xS25CUFh2HBSj
        /kTfABAsLD9GJSgkbXtiRJiqy+PYe5MxQTs/RklislgiBI2D4+WiGPF13IcDkaAwhIJgfNi7dj53xizZ
        Pn+Dd9D7rl5Brd19gt7wCwhu/q8aISEhrVBtUd1R+igz1ETUDNRPqFUot4DgEM/128OS53hFnLJ0j75t
        tCH+IX0loti45d3UAEoqPYTFy69BCI1L+je9R/vouuJdsVMIzb4kO5Ifd4S86DUusV9rWx9obeMNbWy8
        Wa8Zvpd+3RK4Ea97KsoSZYzqiWqPap6b8ANvoIO6YZyC2ozbuzCmYczBWIjxFMZzGC9ivIq6idtV/kEh
        t9z8d9z92SfywVTP6PoxW+LZEPdE/u2jACXdCuBNJS89bOQSMIwCGrmMtvlrYh/aFz/HNFbEIqhgdISU
        OIo9Lba19Wbas33r5q8PuBEUHFyK15mH15mNMQGjL8Y5KG3cbt6fy+CH3kB9hbJBuaBCUYmoLFQeqgRV
        jjqNIkiVqGtCN1DVqJrg4JA7/ijPwLA7Lv7htUv8omp/8Nl119E79p69V/x9W8+EunGeiQ/GbE36l/nW
        ZAXhaw/Ge+5+YOeVUDdtW9y9OT7Rdxf7Rt113h5eu94nuNbJOaB26AK/e+ozfeu+nOZT98U0n/skte99
        6fVqx7UB17CEzmPyFXgtBOc46gDqd1QUygNFFaGJajagVnjgNhg/Q2nh9iCMYzFOxjgT4wKMSzBSqbmj
        fHCbZsQPYzDGaAxJGPdgTMHIJdt+UmzKPo/suwdjMsZYjKEY/TD6YqRr8US54vYyjAsxklvsMY7HaIKx
        P0ZqIe/j9l/7XQw//CqK3PQ26l1UO1Rn1CcogkcuozrWQNFMaKH6oqi+TVAjUCP/YdF5aAL7oej8dB0k
        NdQ3qM9RdL1dUNRv3kPR5L+Feg31fH96pgMKETzS6yiCKNObKAJKF/HOf0F0ntYoSlj+Oui6CIDsOv8C
        iFde+TdjAiF9hatLdgAAAABJRU5ErkJggg==
</value>
  </data>
</root>